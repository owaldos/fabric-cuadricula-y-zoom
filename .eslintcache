[{"/home/oswaldo/proyectos/fabric zoom y grid/src/index.js":"1","/home/oswaldo/proyectos/fabric zoom y grid/src/App.js":"2","/home/oswaldo/proyectos/fabric zoom y grid/src/reportWebVitals.js":"3","/home/oswaldo/proyectos/fabric zoom y grid/src/micanvas.jsx":"4"},{"size":478,"mtime":1610469471131,"results":"5","hashOfConfig":"6"},{"size":155,"mtime":1616718422733,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1610467936630,"results":"8","hashOfConfig":"6"},{"size":6182,"mtime":1616728981311,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6woekz",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/oswaldo/proyectos/fabric zoom y grid/src/index.js",[],"/home/oswaldo/proyectos/fabric zoom y grid/src/App.js",[],"/home/oswaldo/proyectos/fabric zoom y grid/src/reportWebVitals.js",[],"/home/oswaldo/proyectos/fabric zoom y grid/src/micanvas.jsx",["18","19","20"],{"ruleId":"21","severity":1,"message":"22","line":15,"column":43,"nodeType":"23","messageId":"24","endLine":15,"endColumn":45},{"ruleId":"21","severity":1,"message":"22","line":149,"column":28,"nodeType":"23","messageId":"24","endLine":149,"endColumn":30},{"ruleId":"25","severity":1,"message":"26","line":228,"column":16,"nodeType":"27","endLine":228,"endColumn":64},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","Assignments to the 'micanvas' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression"]